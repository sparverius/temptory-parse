{a,b,c:int | a + b >= c; a >= 0}
(* ****** ****** *)

(*
//
$(...)
@(...)
//
${...}
@{...}
//
$tup(...)
@tup(...)
$rec(...)
@rec(...)
*)

typedef
point =
${x=int, y=int}

(*
T_TUPLE
T_ARRAY
T_RECORD
*)

{a,b,c:int | a + b >= c; a >= 0}

(* ****** ****** *)

abstype(tbox+, view-)

(* ****** ****** *)

typedef xyz = $extype"abcde"

(* ****** ****** *)

abstype xyz(x, y: int, z: int)
abstype xyz(x, y: int, z: int) = int
abstype xyz(x, y: int, z: int) == int

(* ****** ****** *)
//
val xyz =
  if x > 0 then f; g; h else i; j
//
(* ****** ****** *)

val x = `(x+y)` \+ Hello
val res =
#foldleft<...>(xs) where
{
  implement
  #foldleft$init<int>() = 0
  implement
  #foldleft$fopr<int><int>(res, x) = res + x
}
val res =
let
  implement
  #foldleft$init<int>() = 0
  implement
  #foldleft$fopr<int><int>(res, x) = res + x
in
  #foldleft<...>(xs)
end // end of [let]

#include
%(DIR+"hello.dats")

val xyz1 = #@(abcde)
val xyz2 = $@(abcde)

(* ****** ****** *)

stacst l0: addr
stadef T = int\@(l0+1)

(* ****** ****** *)

#staload XY = #MIX(X, Y)

(* ****** ****** *)
//
val x = $X.123 + $X$Y.456
//
val len = foldleft(xs, 0, lam($0+1))
val sum = foldleft(xs, 0, lam($0+$1))
//
val len = foldright(xs, lam($0+1), 0)
val sum = foldright(xs, lam($0+$1), 0)
//
val sum = foldright<...>(xs, lam($0+$1), 0)
//
(* ****** ****** *)

case x of
| pat =>
  if x then y else z
| op(+)(3, 4)

(* ****** ****** *)

fun
foo{i:int}[i,j](x: int(i)): bool(i > 0)

`(f(,(x), ,(y)))

list(@[1, 2, 3, 4, 5])
$array{int}(1, 3, 5, 7, 9)
$list_t{int}(1, 3, 5, 7, 9)
$list_vt{int}(1, 3, 5, 7, 9)

(* ****** ****** *)

val xf =
3.1416 + 1.01234e-12 + 0x0.0123456789abcdefp+a1 + 0x.999999

(* ****** ****** *)

val acker33 = acker(3, 3)

(* ****** ****** *)

// /*
/* end of [test_syntax.text] */
// */

(*
(* end of [test_syntax.text] *)
*)


/**
 Is this one special?
 */

////

The rest is treated as comment:

'What?
'\000'
"This unclosed string is ill-formed!!!"
